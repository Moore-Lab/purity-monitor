{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from scipy import signal\n",
    "from scipy.optimize import curve_fit\n",
    "from scipy.signal import find_peaks\n",
    "from natsort import natsorted\n",
    "import pandas as pd\n",
    "from scipy.signal import butter, lfilter, freqz, filtfilt\n",
    "from scipy.special import erfc\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('../../style.mplstyle')\n",
    "colors = plt.rcParams['axes.prop_cycle'].by_key()['color']\n",
    "from datetime import datetime\n",
    "from datetime import timedelta\n",
    "import re, os\n",
    "import h5py\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import sys\n",
    "sys.path.insert(0,'../../')\n",
    "sys.path.insert(0,'../../WaveformAnalysis')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import Dataset as Dataset\n",
    "import StandMonitor as Monitor\n",
    "import PlotFunctions as Plt\n",
    "from Waveform import Waveform\n",
    "from SiPM import SiPM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "9\n"
     ]
    }
   ],
   "source": [
    "#load data from files using the SiPM class\n",
    "data=SiPM(Path='C:/Data/20220525/',Selection='*V*.h5')\n",
    "\n",
    "#load the Channel attribute\n",
    "data.Ch=[Waveform(ID=1,Pol=-1)]\n",
    "print (len(data.Files))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "#loop over files and load data using the ImportDataFromHDF5 function in Dataset class\n",
    "\n",
    "data.Files=natsorted(data.Files)\n",
    "max_amp_all_st=[]\n",
    "for File in data.Files:\n",
    "    loaded_data=SiPM(Path=File) # Call the SiPM Class\n",
    "    loaded_data.Ch=[Waveform(ID=2,Pol=-1)] # Since we only have data from a single channel, we store it in an array\n",
    "    loaded_data.ImportDataFromHDF5(File,loaded_data.Ch,var=[]) #Import data from the HD5 file with empty var array since we don't need trigger or time stamp\n",
    "    \n",
    "    loaded_data.get_sampling()\n",
    "\n",
    "    loaded_data.sampling_freq\n",
    "    \n",
    "    loaded_data.shaping_time=[2e-6,5e-6,10e-6] #List of shaping times to shape the signal with\n",
    "\n",
    "    loaded_data.setup_butter_filter() # calculate the butterworth filter coefficients \n",
    "    # print(loaded_data.Ch[0].Amp[0])\n",
    "    \n",
    "    for waveform in loaded_data.Ch[0].Amp: #loop over the waveforms inside the file\n",
    "        y=loaded_data.get_filtered_waveform(waveform) # return the filtered waveform\n",
    "    \n",
    "        max_amp=loaded_data.Ch[0].GetAllMaxima(y)\n",
    "        # print(max_amp)\n",
    "        max_amp_all_st.append(max_amp)\n",
    "        # max_array_sh1.append(max_amp[0])\n",
    "        # max_array_sh2.append(max_amp[1])\n",
    "        # max_array_sh3.append(max_amp[2])\n",
    "        # print(max_array_sh1)\n",
    "        # plt.plot(loaded_data.Ch[0].Time,waveform,color='b')\n",
    "        # [plt.plot(loaded_data.Ch[0].Time,y1) for y1 in y]\n",
    "        # plt.xlim(500,550)\n",
    "        # plt.show()\n",
    "max_amp_all_st=np.array(max_amp_all_st)      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[106.89544725 111.42156905 109.21942854]\n",
      " [107.39153699 111.85345835 109.67615462]\n",
      " [109.41328699 113.6703932  111.67119786]\n",
      " [109.37267941 113.94659214 111.71161509]\n",
      " [109.62249717 113.98735616 111.98727027]\n",
      " [109.3560634  113.86404772 111.73940501]\n",
      " [109.75360911 114.16049466 111.89533488]\n",
      " [109.92216167 114.39661072 112.15851095]\n",
      " [110.22494837 114.52778414 112.48419078]\n",
      " [109.79808583 114.24247373 111.99147089]\n",
      " [109.99877655 114.33463983 112.22750801]\n",
      " [109.6227214  114.1355773  111.94811981]\n",
      " [107.19921866 111.72908043 109.44174225]\n",
      " [110.08529396 114.14502492 112.18454822]\n",
      " [109.46461807 113.95918663 111.95630707]\n",
      " [109.60014639 114.01089666 111.95811404]\n",
      " [110.28675717 114.68183418 112.4511243 ]\n",
      " [109.87985155 114.36805293 112.25104941]\n",
      " [109.97897486 114.43912956 112.20404165]\n",
      " [109.94028771 114.18306927 112.02940324]\n",
      " [109.8794086  114.37531373 112.1257582 ]\n",
      " [110.12016058 114.72002918 112.53984295]\n",
      " [109.77954212 114.14245789 111.92714125]\n",
      " [107.43564741 112.10104074 109.9928346 ]\n",
      " [109.7980549  114.23873678 112.20446476]\n",
      " [110.46204772 114.7249059  112.39530772]\n",
      " [109.88298393 114.3644322  112.13157176]\n",
      " [109.85765285 114.22876684 112.0228825 ]\n",
      " [109.9595237  114.40821022 112.46134541]\n",
      " [110.07138579 114.48771985 112.18444918]\n",
      " [110.27201042 114.77295914 112.48631416]\n",
      " [109.84072899 114.2254179  112.20511565]\n",
      " [109.98367263 114.50759777 112.20768129]\n",
      " [110.23234302 114.81514298 112.60510988]\n",
      " [107.86171087 112.48661018 110.37285517]\n",
      " [110.03442098 114.18382033 112.18222707]\n",
      " [109.78217711 114.25960784 112.02863493]\n",
      " [109.96686549 114.30618437 112.16540142]\n",
      " [109.90607459 114.08748604 112.11350171]\n",
      " [110.26194147 114.78605423 112.50442268]\n",
      " [109.89425662 114.27456107 112.21424945]\n",
      " [110.41938371 114.83075841 112.52658565]\n",
      " [110.09924631 114.38057112 112.28846985]\n",
      " [109.81989241 114.25215635 112.3075583 ]\n",
      " [110.07185487 114.65950964 112.53425215]\n",
      " [108.11329529 112.74890799 110.4182782 ]\n",
      " [110.15727592 114.60818093 112.36210502]\n",
      " [109.91991857 114.20553814 112.24947093]\n",
      " [109.97159118 114.30300528 112.1182813 ]\n",
      " [110.07953372 114.51287418 112.25168636]\n",
      " [110.09758763 114.49179346 112.32735848]\n",
      " [109.88219866 114.47514373 112.26247842]\n",
      " [110.10526953 114.4724317  112.34688906]\n",
      " [110.06893847 114.5353913  112.38717817]\n",
      " [109.93713236 114.5259013  112.49384579]\n",
      " [109.85205237 114.35901398 112.19874676]\n",
      " [108.91864955 113.04227673 111.15904131]\n",
      " [110.10183863 114.59414944 112.44618932]\n",
      " [109.74760132 114.27688548 112.2312568 ]\n",
      " [110.10993509 114.34325997 112.32042981]\n",
      " [110.25751996 114.65275594 112.39854366]\n",
      " [109.95468417 114.55810744 112.30121936]\n",
      " [110.13271529 114.68419854 112.37525353]\n",
      " [109.87385958 114.2684677  112.25997773]\n",
      " [110.0141378  114.48269153 112.34222202]\n",
      " [110.20819425 114.65308247 112.45915017]\n",
      " [109.80566801 113.9886539  111.88971753]\n",
      " [109.01590388 113.44978458 111.19796659]\n",
      " [110.05426999 114.60326635 112.37496745]\n",
      " [109.98204464 114.30700417 112.12356903]\n",
      " [109.93332441 114.08134954 112.06946574]\n",
      " [109.75762556 114.15790788 112.1042879 ]\n",
      " [109.73768077 114.26559002 111.99947348]\n",
      " [109.88280213 114.41310548 112.33754091]\n",
      " [109.78987105 114.11018518 111.98462881]\n",
      " [109.71797746 114.16837414 112.00135968]\n",
      " [109.56200436 114.19589054 111.94253853]\n",
      " [110.36159857 114.70879846 112.49344733]\n",
      " [108.94448481 113.53059733 111.34594393]\n",
      " [109.43357966 113.96501333 111.84434786]\n",
      " [110.16253288 114.41823981 112.28111386]\n",
      " [110.02870801 114.46835199 112.30360118]\n",
      " [109.95543523 114.34213992 112.15843292]\n",
      " [110.15003566 114.54338523 112.27840779]\n",
      " [109.81122016 114.23391315 111.99516568]\n",
      " [110.19617819 114.61110204 112.45456805]\n",
      " [109.89818124 114.38625053 112.34414809]\n",
      " [110.08846607 114.57860346 112.34763969]\n",
      " [110.07082616 114.54199058 112.37723034]\n",
      " [109.30230686 113.76405509 111.5090295 ]\n",
      " [110.01273803 114.61047852 112.35698372]\n",
      " [110.0986082  114.56647111 112.52301463]\n",
      " [110.26918814 114.8723277  112.64161276]\n",
      " [110.06729326 114.65568031 112.35372776]\n",
      " [110.12966319 114.66144654 112.51646626]\n",
      " [110.34894797 114.64155484 112.44983001]\n",
      " [110.28270637 114.77647108 112.57691433]\n",
      " [110.36954231 114.81390088 112.63132871]\n",
      " [109.9288285  114.40106358 112.21363184]\n",
      " [110.16251649 114.6813283  112.52268574]]\n"
     ]
    }
   ],
   "source": [
    "print(max_amp_all_st[0:100])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "BINS=np.linspace(0,1200,200)\n",
    "plt.figure(figsize=(8,6))\n",
    "[plt.hist(max_amp_all_st[100*i:(i+1)*100],bins=BINS,histtype='stepfilled') for i in range(0,9,1)]\n",
    "# plt.legend(loc='best')\n",
    "plt.ylim(0,110)\n",
    "plt.xlabel('Voltage (mV)')\n",
    "plt.ylabel('Counts')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[106.89544725 111.42156905 109.21942854]\n",
      " [107.39153699 111.85345835 109.67615462]\n",
      " [109.41328699 113.6703932  111.67119786]\n",
      " [109.37267941 113.94659214 111.71161509]\n",
      " [109.62249717 113.98735616 111.98727027]\n",
      " [109.3560634  113.86404772 111.73940501]\n",
      " [109.75360911 114.16049466 111.89533488]\n",
      " [109.92216167 114.39661072 112.15851095]\n",
      " [110.22494837 114.52778414 112.48419078]\n",
      " [109.79808583 114.24247373 111.99147089]\n",
      " [109.99877655 114.33463983 112.22750801]\n",
      " [109.6227214  114.1355773  111.94811981]\n",
      " [107.19921866 111.72908043 109.44174225]\n",
      " [110.08529396 114.14502492 112.18454822]\n",
      " [109.46461807 113.95918663 111.95630707]\n",
      " [109.60014639 114.01089666 111.95811404]\n",
      " [110.28675717 114.68183418 112.4511243 ]\n",
      " [109.87985155 114.36805293 112.25104941]\n",
      " [109.97897486 114.43912956 112.20404165]\n",
      " [109.94028771 114.18306927 112.02940324]\n",
      " [109.8794086  114.37531373 112.1257582 ]\n",
      " [110.12016058 114.72002918 112.53984295]\n",
      " [109.77954212 114.14245789 111.92714125]\n",
      " [107.43564741 112.10104074 109.9928346 ]\n",
      " [109.7980549  114.23873678 112.20446476]\n",
      " [110.46204772 114.7249059  112.39530772]\n",
      " [109.88298393 114.3644322  112.13157176]\n",
      " [109.85765285 114.22876684 112.0228825 ]\n",
      " [109.9595237  114.40821022 112.46134541]\n",
      " [110.07138579 114.48771985 112.18444918]\n",
      " [110.27201042 114.77295914 112.48631416]\n",
      " [109.84072899 114.2254179  112.20511565]\n",
      " [109.98367263 114.50759777 112.20768129]\n",
      " [110.23234302 114.81514298 112.60510988]\n",
      " [107.86171087 112.48661018 110.37285517]\n",
      " [110.03442098 114.18382033 112.18222707]\n",
      " [109.78217711 114.25960784 112.02863493]\n",
      " [109.96686549 114.30618437 112.16540142]\n",
      " [109.90607459 114.08748604 112.11350171]\n",
      " [110.26194147 114.78605423 112.50442268]\n",
      " [109.89425662 114.27456107 112.21424945]\n",
      " [110.41938371 114.83075841 112.52658565]\n",
      " [110.09924631 114.38057112 112.28846985]\n",
      " [109.81989241 114.25215635 112.3075583 ]\n",
      " [110.07185487 114.65950964 112.53425215]\n",
      " [108.11329529 112.74890799 110.4182782 ]\n",
      " [110.15727592 114.60818093 112.36210502]\n",
      " [109.91991857 114.20553814 112.24947093]\n",
      " [109.97159118 114.30300528 112.1182813 ]\n",
      " [110.07953372 114.51287418 112.25168636]\n",
      " [110.09758763 114.49179346 112.32735848]\n",
      " [109.88219866 114.47514373 112.26247842]\n",
      " [110.10526953 114.4724317  112.34688906]\n",
      " [110.06893847 114.5353913  112.38717817]\n",
      " [109.93713236 114.5259013  112.49384579]\n",
      " [109.85205237 114.35901398 112.19874676]\n",
      " [108.91864955 113.04227673 111.15904131]\n",
      " [110.10183863 114.59414944 112.44618932]\n",
      " [109.74760132 114.27688548 112.2312568 ]\n",
      " [110.10993509 114.34325997 112.32042981]\n",
      " [110.25751996 114.65275594 112.39854366]\n",
      " [109.95468417 114.55810744 112.30121936]\n",
      " [110.13271529 114.68419854 112.37525353]\n",
      " [109.87385958 114.2684677  112.25997773]\n",
      " [110.0141378  114.48269153 112.34222202]\n",
      " [110.20819425 114.65308247 112.45915017]\n",
      " [109.80566801 113.9886539  111.88971753]\n",
      " [109.01590388 113.44978458 111.19796659]\n",
      " [110.05426999 114.60326635 112.37496745]\n",
      " [109.98204464 114.30700417 112.12356903]\n",
      " [109.93332441 114.08134954 112.06946574]\n",
      " [109.75762556 114.15790788 112.1042879 ]\n",
      " [109.73768077 114.26559002 111.99947348]\n",
      " [109.88280213 114.41310548 112.33754091]\n",
      " [109.78987105 114.11018518 111.98462881]\n",
      " [109.71797746 114.16837414 112.00135968]\n",
      " [109.56200436 114.19589054 111.94253853]\n",
      " [110.36159857 114.70879846 112.49344733]\n",
      " [108.94448481 113.53059733 111.34594393]\n",
      " [109.43357966 113.96501333 111.84434786]\n",
      " [110.16253288 114.41823981 112.28111386]\n",
      " [110.02870801 114.46835199 112.30360118]\n",
      " [109.95543523 114.34213992 112.15843292]\n",
      " [110.15003566 114.54338523 112.27840779]\n",
      " [109.81122016 114.23391315 111.99516568]\n",
      " [110.19617819 114.61110204 112.45456805]\n",
      " [109.89818124 114.38625053 112.34414809]\n",
      " [110.08846607 114.57860346 112.34763969]\n",
      " [110.07082616 114.54199058 112.37723034]\n",
      " [109.30230686 113.76405509 111.5090295 ]\n",
      " [110.01273803 114.61047852 112.35698372]\n",
      " [110.0986082  114.56647111 112.52301463]\n",
      " [110.26918814 114.8723277  112.64161276]\n",
      " [110.06729326 114.65568031 112.35372776]\n",
      " [110.12966319 114.66144654 112.51646626]\n",
      " [110.34894797 114.64155484 112.44983001]\n",
      " [110.28270637 114.77647108 112.57691433]\n",
      " [110.36954231 114.81390088 112.63132871]\n",
      " [109.9288285  114.40106358 112.21363184]\n",
      " [110.16251649 114.6813283  112.52268574]]\n"
     ]
    }
   ],
   "source": [
    "print(max_amp_all_st[0:100])\n",
    "# print(np.mean(max_amp_all_st[0:100]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[106.89544725 111.42156905 109.21942854]\n",
      "[107.39153699 111.85345835 109.67615462]\n",
      "[109.41328699 113.6703932  111.67119786]\n",
      "[109.37267941 113.94659214 111.71161509]\n",
      "[109.62249717 113.98735616 111.98727027]\n"
     ]
    }
   ],
   "source": [
    "for value in max_amp_all_st[0:5]:\n",
    "    print(value)\n",
    "# [mean_sh1.append((max_array_sh1[9*i])) for i in np.arange(0,100,1)]\n",
    "# [mean_sh2.append(np.mean(max_array_sh2[100*i:100*(i+1)])) for i in np.arange(0,9,1)]\n",
    "# [mean_sh3.append(np.mean(max_array_sh3[100*i:100*(i+1)])) for i in np.arange(0,9,1)]\n",
    "# plt.figure(figsize=(8,6))\n",
    "# plt.scatter(np.arange(0.5,5,0.5),mean_sh1,color=colors[0],label='2$\\mu$s')\n",
    "# # plt.scatter(np.arange(0.5,5,0.5),mean_sh2,color=colors[1],label='5$\\mu$s')\n",
    "# # plt.scatter(np.arange(0.5,5,0.5),mean_sh3,color=colors[2],label='10$\\mu$s')\n",
    "# # plt.legend(loc='best')\n",
    "# plt.xlim(0,5)\n",
    "# plt.xlabel('Function Gen Voltage (V)')\n",
    "# plt.ylabel('Mean of Max Amplitude (mV)')\n",
    "# plt.show()\n",
    "# print(mean_sh1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "interpreter": {
   "hash": "e5e622b25f84b7135d4643d5fac34167b855b0a6d41d1f6695eb3e0f89a915df"
  },
  "kernelspec": {
   "display_name": "Python 3.8.5 ('base')",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
